# This docker file was originally from here https://github.com/dusty-nv/jetson-containers
# and was edited for this project's purpose.
# 
# The base image of this docker image is an L4T R32.7.1 Operating System (which means a special version of Ubuntu 18.04 for Jetson Nano) 
# and contains ROS2 Foxy framework built from source for the Jetson Nano Development Kit.
# 
# This image adds libraries (some built from source and others installed from binaries) to support a SLAM system
# that can run on the Jetson Nano. The main high level software libraries include:
# - Realsense SDK (i.e. librealsense) required for using Intel Realsense Cameras suc as the D435i or D455
# - Realsense ROS2 Wrapper required to use Intel Realsense Cameras withing the ROS2 framework.
# - RTABMap used as the main SLAM library which is the software that takes in data from the cameras and produces a 3D map.
# - RTABMap ROS 2 Wrapper required for using RTABMap within the ROS2 framework.
# 
#
# r32.7.1 is JetPack 4.6.1
ARG BASE_IMAGE=dustynv/ros:foxy-ros-base-l4t-r32.7.1
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

SHELL ["/bin/bash", "-c"] 
ENV SHELL /bin/bash

ENV DEBIAN_FRONTEND=noninteractive
ARG MAKEFLAGS=-j$(nproc)
ENV LANG=en_US.UTF-8 
ENV PYTHONIOENCODING=utf-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV PYTORCH_PATH="/usr/local/lib/python3.6/dist-packages/torch"
ENV LD_LIBRARY_PATH="${PYTORCH_PATH}/lib:${LD_LIBRARY_PATH}"

ARG ROS_ENVIRONMENT=${ROS_ROOT}/install/setup.bash

# apt-key command was needed or else it would fail with public key is not available
RUN cd && sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 42D5A192B819C5DA && apt-get update -y && \
    git clone https://github.com/Brac24/installLibrealsense.git && \
    cd installLibrealsense && ./buildLibrealsense.sh

RUN cd && rm -r librealsense


# 
# upgrade cmake - https://stackoverflow.com/a/56690743
# this is needed for rtabmap which uses FindPython3.cmake
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		  software-properties-common \
		  apt-transport-https \
		  ca-certificates \
		  gnupg \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean
		  
RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
    apt-get update && \
    apt-get install -y --only-upgrade --no-install-recommends \
            cmake \ 
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && cmake --version

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
            ffmpeg \
            libglew-dev \
		  libboost-all-dev \
		  libboost-system-dev \
		  libcanberra-gtk-module \
            libsuitesparse-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# pangolin
RUN git clone https://github.com/stevenlovegrove/Pangolin /tmp/pangolin && \
    cd /tmp/pangolin && \
    mkdir build && \
    cd build && \
    cmake ../ && \
    make -j$(nproc) && \
    make install 

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		  libpcl-dev \
		  libpython3-dev \
		  python3-dev \
		  libsuitesparse-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Added -DCMAKE_CXX_STANDARD_LIBRARIES="-lstdc++fs" because gtsam was failing to compile. Used this issue to resolve issue https://github.com/borglab/gtsam/issues/1495
# The issue seemed to have to do with use of gcc7, as described here https://stackoverflow.com/questions/33149878/experimentalfilesystem-linker-error,
# on the L4T 32.7.1 (Ubuntu 18.04) OS. The L4T 32.7.1 Jetson OS has to use gcc7 for reasons tied to its CUDA version I believe.
# Try removing -b 4.2a8 and clone most current instead next time.
# Also try adding -DCMAKE_BUILD_TYPE=Release to its cmake.
# Also try adding the cmake flag to disable building examples since we don't need them.
RUN git clone -b 4.2a8 https://github.com/borglab/gtsam /tmp/gtsam && \
    cd /tmp/gtsam && \
    mkdir build && \
    cd build && \
    cmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF -DGTSAM_WITH_TBB=OFF -DGTSAM_USE_SYSTEM_EIGEN=ON -DCMAKE_CXX_STANDARD_LIBRARIES="-lstdc++fs" .. && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/gtsam

RUN git clone https://github.com/ethz-asl/libnabo /tmp/libnabo && \
    cd /tmp/libnabo && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/libnabo

RUN git clone https://github.com/ethz-asl/libpointmatcher /tmp/libpointmatcher && \
    cd /tmp/libpointmatcher && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/libpointmatcher

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libyaml-cpp-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN apt-get update && apt-get install vim -y

# Copy over the cuda libraries from this other docker image to this currently being buils so that rtabmap compiles
# This was done because the cuda libraries for some reason were not getting loaded at runtime
# when building on my x86 machine but it would load when running the container on the jetson nano
COPY --from=nvcr.io/nvidia/l4t-cuda:10.2.460-runtime /usr/local/cuda-10.2/ /usr/local/cuda-10.2/  

# build rtabmap / rtabmap_ros
RUN git clone https://github.com/introlab/rtabmap.git /opt/rtabmap && \
    cd /opt/rtabmap/build && \
	cmake -DBUILD_EXAMPLES=OFF .. && \
    # cmake -DWITH_PYTHON=ON -DWITH_TORCH=ON -DTorch_DIR=${PYTORCH_PATH}/share/cmake/Torch .. && \
    make -j$(nproc) && \
    make install

# since rtabmap_ros is an 'unreleased' package for ros2, manually pull it's dependencies from
# https://github.com/introlab/rtabmap_ros/blob/dfdbe1f68314e851e017c8af3788b17518a5000b/package.xml#L24
RUN source ${ROS_ENVIRONMENT} && \
    export ROS_PACKAGE_PATH=${AMENT_PREFIX_PATH} && \
    cd ${ROS_ROOT} && \
    mkdir -p src/slam && \
    
    # download sources for dependency packages
    rosinstall_generator --deps --exclude RPP --rosdistro ${ROS_DISTRO} \
        octomap \
		nav2_common \
		laser_geometry \
		pcl_conversions \
		rviz_common \
		rviz_rendering \
		rviz_default_plugins \
		realsense2_camera \
		realsense2_description \
		diagnostic_updater \
		compressed_image_transport \
		compressed_depth_image_transport \
	> ros2.${ROS_DISTRO}.rtabmap.rosinstall && \
    cat ros2.${ROS_DISTRO}.rtabmap.rosinstall && \
    vcs import src/slam < ros2.${ROS_DISTRO}.rtabmap.rosinstall && \
    
    # install apt/deb dependencies using rosdep
    apt-get update && \
    rosdep install -y \
       --ignore-src \
       --from-paths src/slam \
	  --rosdistro ${ROS_DISTRO} \
	  --skip-keys "rtabmap find_object_2d Pangolin libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv librealsense2" && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    
    # build the dependency packages
    colcon build --merge-install --base-paths src/slam && \
	  
    # clean-up build files
    rm -rf ${ROS_ROOT}/src && \
    rm -rf ${ROS_ROOT}/logs && \
    rm -rf ${ROS_ROOT}/build && \
    rm ${ROS_ROOT}/*.rosinstall

    
#
# Set the default DDS middleware to cyclonedds
# https://github.com/ros2/rclcpp/issues/1335
#
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

    
# 
# setup entrypoint
#
COPY ./scripts/ros_entrypoint.sh /ros_entrypoint.sh

RUN sed -i \
    's/ros_env_setup="\/opt\/ros\/$ROS_DISTRO\/setup.bash"/ros_env_setup="${ROS_ROOT}\/install\/setup.bash"/g' \
    /ros_entrypoint.sh && \
    cat /ros_entrypoint.sh

RUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
WORKDIR /
