# THIS IS AN ATTEMPT TO OPTIMIZE THE SYSTEM BY TWEAKING FLAGS FOR CERTAIN PACKAGES BEING BUILT FROM SOURCE



# This docker file was originally from here https://github.com/dusty-nv/jetson-containers
# and was edited for this project's purpose.
# 
# The base image of this docker image is an L4T R32.7.1 Operating System (which means a special version of Ubuntu 18.04 for Jetson Nano) 
# and contains ROS2 Foxy framework built from source for the Jetson Nano Development Kit.
# 
# This image adds libraries (some built from source and others installed from binaries) to support a SLAM system
# that can run on the Jetson Nano. The main high level software libraries include:
# - Realsense SDK (i.e. librealsense) required for using Intel Realsense Cameras suc as the D435i or D455
# - Realsense ROS2 Wrapper required to use Intel Realsense Cameras withing the ROS2 framework.
# - RTABMap used as the main SLAM library which is the software that takes in data from the cameras and produces a 3D map.
# - RTABMap ROS 2 Wrapper required for using RTABMap within the ROS2 framework.
# 
#
# r32.7.1 is JetPack 4.6.1
ARG BASE_IMAGE=dustynv/ros:foxy-pytorch-l4t-r32.7.1
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

SHELL ["/bin/bash", "-c"] 
ENV SHELL /bin/bash

ENV DEBIAN_FRONTEND=noninteractive
ARG MAKEFLAGS=-j$(nproc)
ENV LANG=en_US.UTF-8 
ENV PYTHONIOENCODING=utf-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

ENV PYTORCH_PATH="/usr/local/lib/python3.6/dist-packages/torch"
ENV LD_LIBRARY_PATH="${PYTORCH_PATH}/lib:${LD_LIBRARY_PATH}"

ARG ROS_ENVIRONMENT=${ROS_ROOT}/install/setup.bash

# apt-key command was needed or else it would fail with public key is not available
# RUN cd && apt-get update -y && \
#     git clone https://github.com/Brac24/installLibrealsense.git && \
#     cd installLibrealsense && ./buildLibrealsense.sh
# 
# RUN cd && rm -r librealsense


# 
# upgrade cmake - https://stackoverflow.com/a/56690743
# this is needed for rtabmap which uses FindPython3.cmake
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		  software-properties-common \
		  apt-transport-https \
		  ca-certificates \
		  gnupg \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean
		  
RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
    apt-get update && \
    apt-get install -y --only-upgrade --no-install-recommends \
            cmake \ 
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && cmake --version

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
            ffmpeg \
            libglew-dev \
		  libboost-all-dev \
		  libboost-system-dev \
		  libcanberra-gtk-module \
            libsuitesparse-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# pangolin
RUN git clone https://github.com/stevenlovegrove/Pangolin /tmp/pangolin && \
    cd /tmp/pangolin && \
    mkdir build && \
    cd build && \
    cmake ../ && \
    make -j$(nproc) && \
    make install 

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		  libpcl-dev \
		  libpython3-dev \
		  python3-dev \
		  libsuitesparse-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Added -DCMAKE_CXX_STANDARD_LIBRARIES="-lstdc++fs" because gtsam was failing to compile. Used this issue to resolve issue https://github.com/borglab/gtsam/issues/1495
# The issue seemed to have to do with use of gcc7, as described here https://stackoverflow.com/questions/33149878/experimentalfilesystem-linker-error,
# on the L4T 32.7.1 (Ubuntu 18.04) OS. The L4T 32.7.1 Jetson OS has to use gcc7 for reasons tied to its CUDA version I believe.
# Try removing -b 4.2a8 and clone most current instead next time.
# Also try adding -DCMAKE_BUILD_TYPE=Release to its cmake.
# Also try adding the cmake flag to disable building examples since we don't need them.
# RUN git clone -b 4.2a8 https://github.com/borglab/gtsam /tmp/gtsam && \
#     cd /tmp/gtsam && \
#     mkdir build && \
#     cd build && \
#     cmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF -DCMAKE_BUILD_TYPE=Release -DGTSAM_WITH_TBB=OFF -DGTSAM_USE_SYSTEM_EIGEN=ON -DGTSAM_BUILD_CONVENIENCE_LIBRARIES:OPTION=OFF -DCMAKE_CXX_STANDARD_LIBRARIES="-lstdc++fs" .. && \
#     make -j$(nproc) && \
#     make install && \
#     rm -rf /tmp/gtsam

# RUN git clone -b master https://github.com/ethz-asl/libnabo /tmp/libnabo && \
#     cd /tmp/libnabo && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     make -j$(nproc) && \
#     make install && \
#     rm -rf /tmp/libnabo

# RUN git clone -b libnabo-config-mode https://github.com/sloriot/libpointmatcher.git /tmp/libpointmatcher && \
#     cd /tmp/libpointmatcher && \
#     mkdir build && \
#     cd build && \
#     cmake .. && \
#     # cmake -DPOINTMATCHER_BUILD_EXAMPLES=OFF .. && \
#     make -j$(nproc) && \
#     make install && \
#     rm -rf /tmp/libpointmatcher

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libyaml-cpp-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN apt-get update && apt-get install vim -y

# Copy over the cuda libraries from this other docker image to this currently being buils so that rtabmap compiles
# This was done because the cuda libraries for some reason were not getting loaded at runtime
# when building on my x86 machine but it would load when running the container on the jetson nano
COPY --from=nvcr.io/nvidia/l4t-cuda:10.2.460-runtime /usr/local/cuda-10.2/ /usr/local/cuda-10.2/  

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/aarch64-linux-gnu/tegra

# build rtabmap / rtabmap_ros
RUN git clone https://github.com/introlab/rtabmap.git /opt/rtabmap && \
    cd /opt/rtabmap/build && \
    cmake -DBUILD_EXAMPLES=OFF ..&& \
	# cmake -DBUILD_EXAMPLES=OFF -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -fPIC" .. && \
    # cmake -DWITH_PYTHON=ON -DWITH_TORCH=ON -DTorch_DIR=${PYTORCH_PATH}/share/cmake/Torch .. && \
    make -j$(nproc) && \
    make install

# since rtabmap_ros is an 'unreleased' package for ros2, manually pull it's dependencies from
# https://github.com/introlab/rtabmap_ros/blob/dfdbe1f68314e851e017c8af3788b17518a5000b/package.xml#L24
RUN source ${ROS_ENVIRONMENT} && \
    export ROS_PACKAGE_PATH=${AMENT_PREFIX_PATH} && \
    cd ${ROS_ROOT} && \
    mkdir -p src/slam && \
    
    # rosinstall_generator will essentially put all of the git urls for every dependency that rtabmap_ros needs into a file
    # by calling out --deps --exclude RPP it will not get the URL's for dependencies that already exist in the underlay (i.e /opt/ros/foxy/install)
    rosinstall_generator rtabmap_ros --deps --exclude RPP --rosdistro ${ROS_DISTRO} \
	> ros2.${ROS_DISTRO}.rtabmap.rosinstall && \
    cat ros2.${ROS_DISTRO}.rtabmap.rosinstall && \
    # This command will clone all of the repositories that are in the .rosinstall file that contains all of the git URL's
    vcs import src/slam < ros2.${ROS_DISTRO}.rtabmap.rosinstall
    
    # install apt/deb dependencies using rosdep
RUN  apt-get update && apt-get install libxaw7-dev libxt-dev -y && cd ${ROS_ROOT} && source ${ROS_ENVIRONMENT} &&\
     rosdep install -y \
        --ignore-src \
        --from-paths src/slam \
	   --rosdistro ${ROS_DISTRO} \
	   --skip-keys "rtabmap find_object_2d Pangolin libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv librealsense2" && \
     rm -rf /var/lib/apt/lists/* && \
     apt-get clean
    
# Trying to build libpcl from source because I get this error https://github.com/ros-industrial/yak/issues/9
# To fix the libpcl issue I need either pcl version 1.9 or 1.10 to allow the pcl ros packages to build.
# Clone the pcl-1.10.0 tag of the pcl library and build from source.
RUN apt remove libpcl-* --purge -y && git clone -b pcl-1.10.0 https://github.com/PointCloudLibrary/pcl.git pcl-1.10.0 && \
    mkdir -p pcl-1.10.0/build && cd pcl-1.10.0/build && cmake -DBUILD_GPU=ON -DCMAKE_BUILD_TYPE=Release .. && make -j16 install

    # build the dependency packages that are in the src/slam directory only
#RUN cd ${ROS_ROOT} && source ${ROS_ENVIRONMENT} && colcon build --packages-skip libg2o cartographer_ros cartographer cartographer_ros_msgs libnabo libpointmatcher rtabmap behaviortree_cpp_v3 \
#    turtlebot3_msgs turtlebot3_description ompl turtlebot3_teleop hls_lfcd_lds_driver \
#    turtlebot3_example turtlebot3_node qt_gui_cpp turtlebot3_cartographer --merge-install --base-paths src/slam && \
#    -cmake-args -DFORCE_RSUSB_BACKEND=false -DBUILD_WITH_CUDA=true -DBUILD_EXAMPLES=false -DCMAKE_BUILD_TYPE=release \
RUN cd ${ROS_ROOT} && source ${ROS_ENVIRONMENT} && colcon build \
    # --packages-select pcl_msgs pcl_conversions pcl_ros \
    # diagnostic_updater librealsense2 realsense2_camera realsense2_camera_msgs \
    --packages-skip libg2o cartographer_ros cartographer cartographer_ros_msgs libnabo libpointmatcher turtlebot3_cartographer turtlebot3 \
    --packages-skip-regex rtabmap* \
    # rtabmap rtabmap_ros rtabmap_sync rtabmap_util rtabmap_conversions
    --merge-install --base-paths src/slam  \
    --cmake-args -DFORCE_RSUSB_BACKEND=false -DBUILD_WITH_CUDA=true -DBUILD_EXAMPLES=false -DCMAKE_BUILD_TYPE=release \
    --event-handlers console_direct+ && \ 
#	  
    # clean-up build files
    rm -rf ${ROS_ROOT}/src && \
    rm -rf ${ROS_ROOT}/logs && \
    rm -rf ${ROS_ROOT}/build && \
    rm ${ROS_ROOT}/*.rosinstall

# The curl command updates the key for the ros repository but it is not working when running docker build
# As of now it only works if we first enter the dustynv/ros:foxy-ros-base-l4t-r35.2.1 container and run
# the curl commmand within it and following the apt-get update upgrade commands. 
# rosdep install will then work but it will fail when running within a docker build.
RUN source ${ROS_ENVIRONMENT} && \
    # curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
	# apt-get update -y && \
	# rosdep update -y && \
	# apt-get update --fix-missing && sudo apt-get upgrade -y && \
	# compilation failed on rtabmap because the yaml-cpp library was not installed
	# apt-get install libyaml-cpp-dev -y && \
	cd && mkdir -p dev_ws/src && cd dev_ws && \
	git clone https://github.com/introlab/rtabmap.git src/rtabmap && \
	git clone --branch ros2 https://github.com/introlab/rtabmap_ros.git src/rtabmap_ros && \
	# rosdep update && rosdep install --from-paths src --rosdistro foxy --ignore-src -r -y && \
	export MAKEFLAGS="-j12" && \
	# When compiling I think rtabmap_ros could not find some dependent packages which is why -DCMAKE_PREFIX_PATH was added
	colcon build --merge-install --cmake-args -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DCMAKE_PREFIX_PATH="/opt/ros/foxy/install;/opt/ros/foxy/share" && \
	# The LD_LIBRARY_PATH needed to be updated or else rtabmap_ros will not find its dependent shared libs such as octomap_msgs
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH/opt/ros/foxy/lib

RUN cd /opt/ros/foxy && mkdir -p src/slam && cd src/slam && \
    # clone this hash that was the last realsense-ros that required librealsense v2.48.0
    git clone -b ros2-legacy https://github.com/IntelRealSense/realsense-ros.git && \
    cd realsense-ros && git checkout 1515b8d24e216def3cc7e60d4b44ca8831a4cab8 && cd .. && \
    # clone librealsense v2.48.0 because that is the last known good realsense sdk where the IMU works on Jetson Nano
    git clone -b v2.48.0 https://github.com/IntelRealSense/librealsense.git && \
    cd /opt/ros/foxy && source install/setup.bash && \
    colcon build --merge-install --base-paths src/slam \
    --cmake-args -DFORCE_RSUSB_BACKEND=false -DBUILD_WITH_CUDA=true -DBUILD_EXAMPLES=false -DCMAKE_BUILD_TYPE=release
# build rtabmap_ros, but first patch it to import tf2_geometry_msgs correctly
#RUN source ${ROS_ENVIRONMENT} && \
#    cd ${ROS_ROOT} && \
#    mkdir -p src/slam && \
    
    # download and patch source
    #git clone --branch ros2 https://github.com/introlab/rtabmap_ros.git src/slam/rtabmap_ros && \
    # sed -i '/find_package(tf2_ros REQUIRED)/a find_package(tf2_geometry_msgs REQUIRED)' src/slam/rtabmap_ros/CMakeLists.txt && \
    # sed -i '/   tf2_ros/a tf2_geometry_msgs' src/slam/rtabmap_ros/CMakeLists.txt && \
    
    # install apt/deb dependencies using rosdep
#    apt-get update && \
#    rosdep install -y \
#    	  --ignore-src \
#       --from-paths src/slam \
#	  --rosdistro ${ROS_DISTRO} \
#	  --skip-keys "rtabmap find_object_2d Pangolin libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" && \
#    rm -rf /var/lib/apt/lists/* && \
#    apt-get clean && \
#    
#    # build the node
#    colcon build \
#       --merge-install \
#	  --base-paths src/slam/rtabmap_ros \
#	  --event-handlers console_direct+ && \
#
#    # clean-up build files
#    rm -rf ${ROS_ROOT}/src && \
#    rm -rf ${ROS_ROOT}/logs && \
#    rm -rf ${ROS_ROOT}/build 

# intall GNU Parallel utility to allow us to run bash scripts in parallel 
RUN apt-get update && apt-get install parallel -y
    
#
# Set the default DDS middleware to cyclonedds
# https://github.com/ros2/rclcpp/issues/1335
#
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# COPY ./docker/scripts/launch-legacy-realsense.sh /launch-legacy-realsense-ros.sh
# COPY ./docker/scripts/launch-new-rtabmap.sh /launch-new-rtabmap.sh
# COPY ./docker/scripts/run-slam.sh /run-slam.sh
# RUN mkdir /jetson-nano-slam-scripts
COPY ./docker/scripts /jetson-nano-slam-scripts

# 
# setup entrypoint
#
#COPY ./scripts/ros_entrypoint.sh /ros_entrypoint.sh

#RUN sed -i \
#    's/ros_env_setup="\/opt\/ros\/$ROS_DISTRO\/setup.bash"/ros_env_setup="${ROS_ROOT}\/install\/setup.bash"/g' \
#    /ros_entrypoint.sh && \
#    cat /ros_entrypoint.sh

RUN echo 'source ~/dev_ws/install/setup.bash' >> /root/.bashrc

#ENTRYPOINT ["/root/dev_ws/install/local_setup.bash"]
#CMD ["~/dev_ws/install/local_setup.bash"]
#WORKDIR /
